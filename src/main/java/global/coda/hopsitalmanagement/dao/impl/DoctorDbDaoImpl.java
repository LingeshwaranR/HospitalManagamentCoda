package global.coda.hopsitalmanagement.dao.impl;

import global.coda.hopsitalmanagement.dao.DoctorDbDao;
import global.coda.hopsitalmanagement.dbconnection.MysqlConnection;
import global.coda.hopsitalmanagement.patientdetails.model.Doctor;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * The type Doctor db dao.
 */
public class DoctorDbDaoImpl implements DoctorDbDao {
    @Override
    public Boolean insert(Doctor doctor) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = doctor.getUsername();
        String email = doctor.getEmail();
        String password = doctor.getPassword();
        int roleId = doctor.getRoleId();
        //t_doctor Contents
        int imaNumber = doctor.getImaNumber();
        String specialization = doctor.getSpecialization();


        PreparedStatement statement = sqlConnection.prepareStatement("insert into t_user(username,email,password,fk_role_id) values(?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, roleId);

        statement.executeUpdate();
        //get the Autogenerated Key
        ResultSet privateKeys = statement.getGeneratedKeys();
        if (privateKeys.next()) {
            doctor.setUserId(privateKeys.getInt(1));
        }


        int userId = doctor.getUserId();


        statement = sqlConnection.prepareStatement("insert into t_doctor(imaNumber,specialization,fk_user_id) values(?,?,?)");
        statement.setInt(1, imaNumber);
        statement.setString(2, specialization);
        statement.setInt(3, userId);
        int noOfRowsAffected = statement.executeUpdate();
        if (noOfRowsAffected != 1) {
            sqlConnection.rollback();
        }
        connection.closeConnection();

        return true;

    }

    @Override
    public Doctor read(Doctor doctor) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();


        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,imaNumber,specialization from t_user join t_doctor on t_user.pk_user_id = t_doctor.fk_user_id  where t_user.pk_user_id=? and   t_user.is_active=? and t_doctor.is_active=?");
        statement.setInt(1, doctor.getUserId());
        statement.setInt(2, 1);
        statement.setInt(3, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            doctor.setUserId(resultSet.getInt(1));
            doctor.setUsername(resultSet.getString(2));
            doctor.setEmail(resultSet.getString(3));
            doctor.setPassword(resultSet.getString(4));
            doctor.setRoleId(resultSet.getInt(5));
            doctor.setImaNumber(resultSet.getInt(6));
            doctor.setSpecialization(resultSet.getString(7));
        }
        connection.closeConnection();
        return doctor;

    }

    @Override
    public List<Doctor> readAll() throws SQLException {

        List<Doctor> doctorList = new ArrayList<>();
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();

        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,imaNumber,specialization from t_user join t_doctor on t_user.pk_user_id = t_doctor.fk_user_id  where t_user.is_active=? and t_doctor.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);

        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Doctor doctor = new Doctor();
            doctor.setUserId(resultSet.getInt(1));
            doctor.setUsername(resultSet.getString(2));
            doctor.setEmail(resultSet.getString(3));
            doctor.setPassword(resultSet.getString(4));
            doctor.setRoleId(resultSet.getInt(5));
            doctor.setImaNumber(resultSet.getInt(6));
            doctor.setSpecialization(resultSet.getString(7));
            doctorList.add(doctor);
        }
        connection.closeConnection();


        return doctorList;
    }

    @Override
    public List<Doctor> readAllWithMaskedDetails() throws SQLException {

        List<Doctor> doctorList = new ArrayList<>();
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();

        PreparedStatement statement = sqlConnection.prepareStatement("select username,specialization from t_user join t_doctor on t_user.pk_user_id = t_doctor.fk_user_id  where t_user.is_active=? and t_doctor.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);

        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Doctor doctor = new Doctor();
            doctor.setUsername(resultSet.getString(1));

            doctor.setSpecialization(resultSet.getString(2));
            doctorList.add(doctor);
        }
        connection.closeConnection();


        return doctorList;
    }


    @Override
    public Boolean update(Doctor doctor) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = doctor.getUsername();
        String email = doctor.getEmail();
        String password = doctor.getPassword();
        int userId = doctor.getUserId();
        //t_patient Contents
        int imaNumber = doctor.getImaNumber();
        String specialization = doctor.getSpecialization();


        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set username=?,email=?,password=? where pk_user_id=? and is_active=?");
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, userId);
        statement.setInt(5, 1);
        statement.executeUpdate();
        statement = sqlConnection.prepareStatement("update t_doctor set imaNumber=?,specialization=? where fk_user_id=? and is_active=?");
        statement.setInt(1, imaNumber);
        statement.setString(2, specialization);
        statement.setInt(3, userId);
        statement.setInt(4, 1);
        int noOfRowsAffected = statement.executeUpdate();
        if (noOfRowsAffected != 1) {
            sqlConnection.rollback();
        }

        connection.closeConnection();


        return true;
    }

    @Override
    public Boolean delete(Doctor doctor) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        int userId = doctor.getUserId();

        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set is_active =? where pk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();

        statement = sqlConnection.prepareStatement("update t_patient set is_active=? where fk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();


        connection.closeConnection();
        return true;

    }

}
