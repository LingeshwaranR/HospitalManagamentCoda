package global.coda.hopsitalmanagement.dao.impl;

import global.coda.hopsitalmanagement.dao.PatientDbDao;
import global.coda.hopsitalmanagement.dbconnection.MysqlConnection;
import global.coda.hopsitalmanagement.patientdetails.model.Patient;
import global.coda.hopsitalmanagement.patientdetails.model.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * The type Patient db dao.
 */
public class PatientDbDaoImpl implements PatientDbDao {


    /**
     * Instantiates a new Patient db dao.
     *
     * @throws SQLException the sql exception
     */
    public PatientDbDaoImpl() throws SQLException {
    }


    @Override
    public Boolean insert(Patient patient) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = patient.getUsername();
        String email = patient.getEmail();
        String password = patient.getPassword();
        int roleId = patient.getRoleId();
        //t_patient Contents
        int age = patient.getAge();
        String area = patient.getArea();
        String city = patient.getCity();
        String state = patient.getState();

        PreparedStatement statement = sqlConnection.prepareStatement("insert into t_user(username,email,password,fk_role_id) values(?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, roleId);

        int numberOfRowsAffected = statement.executeUpdate();
        //get the Autogenerated Key
        ResultSet privateKeys = statement.getGeneratedKeys();
        if (privateKeys.next()) {
            patient.setUserId(privateKeys.getInt(1));
        }


        int userId = patient.getUserId();
        System.out.println(userId);


        statement = sqlConnection.prepareStatement("insert into t_patient(age,area,city,state,fk_user_id) values(?,?,?,?,?)");
        statement.setInt(1, age);
        statement.setString(2, area);
        statement.setString(3, city);
        statement.setString(4, state);
        statement.setInt(5, userId);
        int numberOfRowsAffected1 = statement.executeUpdate();
        connection.closeConnection();
        Boolean bool = false;
        if (numberOfRowsAffected == numberOfRowsAffected1) {
            bool = true;

        } else {
            sqlConnection.rollback();
        }

        return bool;

    }

    @Override
    public Patient read(Integer id, Patient patient) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,age,area,city,state from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where  t_user.pk_user_id=? and   t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, patient.getUserId());
        statement.setInt(2, 1);
        statement.setInt(3, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            patient.setUserId(resultSet.getInt(1));
            patient.setUsername(resultSet.getString(2));
            patient.setEmail(resultSet.getString(3));
            patient.setPassword(resultSet.getString(4));
            patient.setRoleId(resultSet.getInt(5));
            patient.setAge(resultSet.getInt(6));
            patient.setArea(resultSet.getString(7));
            patient.setCity(resultSet.getString(8));
            patient.setState(resultSet.getString(9));
        }

        connection.closeConnection();
        return patient;

    }

    @Override
    public List<Patient> readAll() throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        List<Patient> patientList = new ArrayList<>();
        PreparedStatement statement = sqlConnection.prepareStatement("select pk_user_id,username,email,password,fk_role_id,age,area,city,state from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Patient patient = new Patient();
            patient.setUserId(resultSet.getInt(1));
            patient.setUsername(resultSet.getString(2));
            patient.setEmail(resultSet.getString(3));
            patient.setPassword(resultSet.getString(4));
            patient.setRoleId(resultSet.getInt(5));
            patient.setAge(resultSet.getInt(6));
            patient.setArea(resultSet.getString(7));
            patient.setCity(resultSet.getString(8));
            patient.setState(resultSet.getString(9));
            patientList.add(patient);
        }

        connection.closeConnection();
        return patientList;
    }

    @Override
    public List<Patient> readAllWithMaskedDetails() throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        List<Patient> patientList = new ArrayList<>();
        PreparedStatement statement = sqlConnection.prepareStatement("select username,email,age from t_user join t_patient on t_user.pk_user_id = t_patient.fk_user_id where t_user.is_active =? and t_patient.is_active=?");
        statement.setInt(1, 1);
        statement.setInt(2, 1);


        ResultSet resultSet = statement.executeQuery();
        while (resultSet.next()) {
            Patient patient = new Patient();
            patient.setUsername(resultSet.getString(1));
            patient.setEmail(resultSet.getString(2));
            patient.setAge(resultSet.getInt(3));

            patientList.add(patient);
        }

        connection.closeConnection();
        return patientList;
    }

    @Override
    public Boolean update(Patient patient) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        //t_user table contents
        String username = patient.getUsername();
        String email = patient.getEmail();
        String password = patient.getPassword();
        int userId = patient.getUserId();
        //t_patient Contents
        int age = patient.getAge();
        String area = patient.getArea();
        String city = patient.getCity();
        String state = patient.getState();

        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set username=?,email=?,password=? where pk_user_id=? and is_active=?");
        statement.setString(1, username);
        statement.setString(2, email);
        statement.setString(3, password);
        statement.setInt(4, userId);
        statement.setInt(5, 1);
        statement.executeUpdate();
        statement = sqlConnection.prepareStatement("update t_patient set age=?,area=?,city=?,state=? where fk_user_id=? and is_active=?");
        statement.setInt(1, age);
        statement.setString(2, area);
        statement.setString(3, city);
        statement.setString(4, state);
        statement.setInt(5, userId);
        statement.setInt(6, 1);
        statement.executeUpdate();


        connection.closeConnection();


        return true;
    }

    @Override
    public Boolean delete(Integer id, Patient patient) throws SQLException {
        MysqlConnection connection = new MysqlConnection();

        Connection sqlConnection = connection.getConnection();
        int userId = patient.getUserId();

        PreparedStatement statement = sqlConnection.prepareStatement("update t_user set is_active =? where pk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();

        statement = sqlConnection.prepareStatement("update t_patient set is_active=? where fk_user_id=?");
        statement.setInt(1, 0);
        statement.setInt(2, userId);
        statement.executeUpdate();


        connection.closeConnection();
        return true;

    }


}
